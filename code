import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext
import datetime
import google.generativeai as genai

# Initialize Gemini
genai.configure(api_key="AIzaSyBmRzVoN90cUpmvKFQp1jlMCTRjDidQ23I")  # Replace with your API key
model = genai.GenerativeModel("models/gemini-1.5-pro-001")

# Global calendar
calendar = []

# AI Response Function
def ask_gemini(user_input):
    prompt = f"""
    You are an AI assistant embedded in a Family Calendar app. Respond in a friendly and helpful tone. 
    Here's the user's input: "{user_input}"
    Also, calendar data: {calendar}
    Provide smart reminders, calendar help, family schedule advice, or task suggestions.
    """
    response = model.generate_content(prompt)
    return response.text.strip()

# GUI Setup
root = tk.Tk()
root.title("Family Calendar AI")
root.geometry("600x500")
root.configure(bg="#f0f4f7")

# Chat display
chat_display = scrolledtext.ScrolledText(root, wrap=tk.WORD, bg="white", font=("Segoe UI", 11))
chat_display.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
chat_display.insert(tk.END, "ðŸ¤– Welcome to the AI Family Calendar!\nType a message or use the buttons below.\n\n")
chat_display.config(state=tk.DISABLED)

# Input field
user_input = tk.StringVar()

entry = tk.Entry(root, textvariable=user_input, font=("Segoe UI", 12))
entry.pack(padx=10, pady=5, fill=tk.X)

def send_message():
    message = user_input.get()
    if not message:
        return
    chat_display.config(state=tk.NORMAL)
    chat_display.insert(tk.END, f"ðŸ§‘ You: {message}\n")
    user_input.set("")
    response = ask_gemini(message)
    chat_display.insert(tk.END, f"ðŸ¤– AI: {response}\n\n")
    chat_display.config(state=tk.DISABLED)
    chat_display.see(tk.END)

send_btn = tk.Button(root, text="Send", command=send_message, bg="#4CAF50", fg="white", font=("Segoe UI", 11, "bold"))
send_btn.pack(padx=10, pady=5, fill=tk.X)

# Add Event
def add_event():
    title = simpledialog.askstring("Event Title", "Enter event title:")
    date = simpledialog.askstring("Event Date", "Enter date (YYYY-MM-DD):")
    time = simpledialog.askstring("Event Time", "Enter time (HH:MM):")
    assigned_to = simpledialog.askstring("Assigned To", "Assign to (name):")
    
    try:
        dt = datetime.datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
        calendar.append({"title": title, "datetime": dt, "assigned_to": assigned_to})
        messagebox.showinfo("Success", f"Event '{title}' added!")
    except Exception as e:
        messagebox.showerror("Error", f"Invalid date/time format: {e}")

# Show Events
def show_events():
    if not calendar:
        messagebox.showinfo("Calendar", "No events scheduled.")
        return
    events = "\n".join(
        [f"{e['datetime'].strftime('%Y-%m-%d %H:%M')} - {e['title']} (Assigned to: {e['assigned_to']})"
         for e in sorted(calendar, key=lambda x: x['datetime'])]
    )
    messagebox.showinfo("Family Events", events)

# Buttons
btn_frame = tk.Frame(root, bg="#f0f4f7")
btn_frame.pack(pady=10)

add_event_btn = tk.Button(btn_frame, text="âž• Add Event", command=add_event, font=("Segoe UI", 10), bg="#2196F3", fg="white", width=15)
add_event_btn.grid(row=0, column=0, padx=5)

show_events_btn = tk.Button(btn_frame, text="ðŸ“… Show Events", command=show_events, font=("Segoe UI", 10), bg="#9C27B0", fg="white", width=15)
show_events_btn.grid(row=0, column=1, padx=5)

# Run the GUI
root.mainloop()
