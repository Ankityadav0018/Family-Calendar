from flask import Flask, request, jsonify
import google.generativeai as genai
from googleapiclient.discovery import build
from google.oauth2 import service_account
import os
import datetime

app = Flask(__name__)

# Configure Gemini API
os.environ["GOOGLE_API_KEY"] = "AIzaSyBmRzVoN90cUpmvKFQp1jlMCTRjDidQ23I"
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])

# Google Calendar Setup
SCOPES = ["https://www.googleapis.com/auth/calendar"]
SERVICE_ACCOUNT_FILE = "/content/alpine-run-455408-n6-cfb1158cba8f.json"
credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
service = build("calendar", "v3", credentials=credentials)

@app.route("/chat", methods=["POST"])
def chat():
    user_input = request.json.get("message")
    if "add event" in user_input.lower():
        return jsonify({"response": "To add an event, provide details."})
    elif "upcoming events" in user_input.lower():
        return jsonify({"response": get_events()})
    else:
        return jsonify({"response": chat_with_ai(user_input)})

def chat_with_ai(user_input):
    try:
        model = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")
        response = model.generate_content(user_input)
        return response.text.strip()
    except Exception as e:
        return f"Error: {str(e)}"

def get_events():
    now = datetime.datetime.utcnow().isoformat() + "Z"
    events_result = service.events().list(
        calendarId="primary", timeMin=now, maxResults=5, singleEvents=True,
        orderBy="startTime").execute()
    events = events_result.get("items", [])
    if not events:
        return "No upcoming events."
    event_list = "Upcoming Events:\n"
    for event in events:
        start = event['start'].get('dateTime', event['start'].get('date'))
        event_list += f"- {event['summary']} at {start}\n"
    return event_list

if __name__ == "__main__":
    app.run(debug=True)
